[tool.poetry]
name = "message-shorthand"
version = "1.0.0"
description = "Allows the use short aliases in commit message which are rephrased by long common phrases, such as Coauthor information."
authors = ["Kjeld Schmidt <contact@kjeld-schmidt.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.scripts]
message_shorthand = "message_shorthand:main"

[tool.poetry.dependencies]
python = ">=3.8"
click = "^8.1.7"

[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
pytest = "^8.2.2"
ruff = "^0.4.10"
pytest-mock = "^3.14.0"

[tool.poe.tasks.test]
cmd = "pytest ."
help = "Runs all tests in the project"

[tool.poe.tasks.type-check]
cmd = "mypy message_shorthand/"
help = "Performs type analysis against all code"

[tool.poe.tasks.format]
cmd = "ruff format message_shorthand/"
help = "Applies automatic formatting - recommended locally"

[tool.poe.tasks.format-check]
cmd = "ruff format message_shorthand/ --check"
help = "Verifies that the formatting is correct - recommended on CI"

[tool.poe.tasks.lint]
cmd = "ruff check message_shorthand/ --fix"
help = "Lints and applies basic fixes where possible. Recommended locally"

[tool.poe.tasks.lint-check]
cmd = "ruff check message_shorthand/"
help = "Verifies that there are no linting issues - recommended on CI"

[tool.poe.tasks.quality-gates]
sequence = ["format", "lint", "type-check", "test"]
help = "Runs all quality gates in sequence. Recommended before commit."

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # These rules are inherently in conflict with others, so we picked our preference.
    "D203", # one-blank-line-before-class (docstring placement)
    "D212", # multi-line-summary-first-line (docstring formatting)
    # These rules should never occur if we use the ruff formater
    # Disabling them is recommended here: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191", "E111", "E114", "E117", "D206", "D300", "Q000", "Q001", "Q002", "Q003", "COM812", "COM819", "ISC001", "ISC002",
]

[tool.ruff.lint.per-file-ignores]
"**/*_test.py" = ["S101", "D103"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_explicit = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
strict = true
show_error_context = true
warn_redundant_casts = true
warn_unused_ignores = true
pretty = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
